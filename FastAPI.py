# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ETgLgwdx7MGJ4LFIc194xOoIvS5u_pDB

# FastAPI Tutorial

# Install and Get Started with FastAPI
"""

pip install fastapi uvicorn

from fastapi import FastAPI

# Create an app
app = FastAPI()

# define a path for HTTP Get method
@app.get("/")
def root():
    return {"Hello": "World"}

uvicorn main:app --reload

"""Correction"""

!uvicorn main:app --reload

"""# GET and POST Routes"""

items = []

@app.post("items")
def create_item(item: str):
    items.append(item)
    return item

curl -X POST -H "Content-Type: application/json" 'http://127.0.0.1:8000/items?item=apple'

"""Correction"""

!curl -X POST -H "Content-Type: application/json" "http://127.0.0.1:8000/items?item=apple"

@app.get("items/{item_id}")
def get_item(item_id: int) -> str:
    item = items[item_id]
    return item

curl -X GET http://127.0.0.1:8000/items/0

"""Correction"""

!curl -X GET http://127.0.0.1:8000/items/0

curl -X GET http://127.0.0.1:8000/items/7

"""Correction"""

!curl -X GET http://127.0.0.1:8000/items/7

"""# Handling HTTP Errors"""

from fastapi import FastAPI, HTTPException

@app.get("items/{item_id}")
def get_item(item_id: int) -> str:
    if item_id < len(items):
        return = items[item_id]
    else:
        raise HTTPException(status_code=404, detail=f"Item {item_id} not found")

"""Correction"""

@app.get("items/{item_id}")
def get_item(item_id: int) -> str:
    if item_id < len(items):
        return  items[item_id]
    else:
        raise HTTPException(status_code=404, detail=f"Item {item_id} not found")

curl -X GET http://127.0.0.1:8000/items/7

"""Correction

"""

!curl -X GET http://127.0.0.1:8000/items/7

{"detail" : "Item 7 not found"}

"""# JSON Request and Path Parameters"""

# this endpoint uses a query parameter 'limit'
@app.get("/items/")
def list_items(limit: int = 10):
    return items[0:limit]

curl -X GET 'http://127.0.0.1:8000/items?limit=3'

"""Correction"""

!curl -X GET 'http://127.0.0.1:8000/items?limit=3'

"""# Pydantic models"""

from pydantic import BaseModel

class Item(BaseModel):
    text: str = None
    is_done: bool = False

...
def create_item(item: Item):
...
def get_item(item_id: int) -> Item:

"""Correction"""

def create_item(item: Item):
    pass

def get_item(item_id: int) -> Item:
    pass

curl -X POST -H "Content-Type: application/json" 'http://127.0.0.1:8000/items?item=apple'

"""Correction"""

!curl -X POST -H "Content-Type: application/json" 'http://127.0.0.1:8000/items?item=apple'

!curl -X POST -H "Content-Type: application/json" -d '{"text":"apple"}' 'http://127.0.0.1:8000/items'

[{"text":"apple","is_done":false}]

"""Correction"""

[{"text": "apple", "is_done": False}]

class Item(BaseModel):
    # without default value
    text: str
    is_done: bool = False

!curl -X POST -H "Content-Type: application/json" -d '{"title":"apple"}' 'http://127.0.0.1:8000/items'

"""# Response Models"""

...
# Specify the response type will be a list of Item
@app.get("/items", response_model=list[Item])
def list_item(limit: int = 10):
...
# Specify the response type will be an Item model
@app.get("/items/{item_id}", response_model=Item)
def get_item(item_id: int) -> Item:

"""correction"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

app = FastAPI()

# Modèle de données
class Item(BaseModel):
    text: str
    is_done: bool

# Liste simulée d'items
items = [{"text": "apple", "is_done": False}]

# Liste d'items avec une limite de résultats
@app.get("/items", response_model=List[Item])
def list_item(limit: int = 10):
    return items[:limit]

# Obtenir un item spécifique
@app.get("/items/{item_id}", response_model=Item)
def get_item(item_id: int) -> Item:
    if item_id < len(items):
        return items[item_id]
    else:
        raise HTTPException(status_code=404, detail=f"Item {item_id} not found")