# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YNHyqu6KEX2J662Q-is0xbJOtnJ8Da6k

# Compte rendu

# Pydantic Tutorial

# Python’s Dynamic Typing Problem

Exemple 1
"""

# Python
x = 10

# Java
int x = 10;

"""Exemple 2"""

x = 10
x = 'hello'

"""Exemple 3

"""

ali = Person("Ali", 24)    # Correct
ali = Person("Ali", "24")  # Mistake

"""Exemple 4"""

@dataclass
class Person:
    name: str
    age: str

# Using Pydantic
class Person(BaseModel):
    name: str
    email: EmailStr
    account_id: int

"""Correction"""

from dataclasses import dataclass

@dataclass
class Person:
    name: str
    age: str

"""# How To Use Pydantic

Exemple 1

Correction
"""

pip install pydantic

from pydantic import BaseModel

class User(BaseModel):
    name: str
    email: str
    account_id: int

user = User(
    name = "Salah",
    email = "salah@gmail.com",
    account_id = 12345
)

user_data = {
    'name': 'Salah',
    'email': 'salah@gmail.com',
    'account_id': 12345
}

user = User(**user_data)

print(user.name)    # Salah
print(user.name)    # salah@gmail.com
print(user.name)    # 12345

"""# Validating Data with Pydantic

Exemple 1
"""

from pydantic import BaseModel

class User(BaseModel):
    name: str
    email: str
    account_id: int

# It will fail and show a validation error
user = User(name = 'Ali', email = 'ali@gmailcom', account_id = 'hello')
print(user)

"""Correction"""

from pydantic import BaseModel, EmailStr, ValidationError

class User(BaseModel):
    name: str
    email: EmailStr  # Validation stricte d'e-mail
    account_id: int

try:
    user = User(name='Ali', email='ali@gmailcom', account_id='hello')
    print(user)

except ValidationError as e:
    print("Erreur de validation :")
    print(e)

"""Exemple 2"""

from pydantic import BaseModel, EmailStr

class User(BaseModel):
    name: str
    email: EmailStr     # pip install pydantic[email]
    account_id: int

# It will fail and show a validation error with email = 'ali'
user = User(name = 'Ali', email = 'ali', account_id = 1234)
print(user)

"""Correction"""

from pydantic import BaseModel, EmailStr, ValidationError

class User(BaseModel):
    name: str
    email: EmailStr
    account_id: int

try:
    user = User(name='Ali', email='ali', account_id=1234)
    print(user)
except ValidationError as e:
    print("Erreur de validation :")
    print(e)

"""# Custom Field Validation

Exemple 1
"""

@field_validator("account_id")
def validate_account_id(cls, value):
    if value <= 0:
        raise ValueError(f"account_id must be positive: {value}")
    return value

"""Correction"""

from pydantic import BaseModel, EmailStr, ValidationError, field_validator

class User(BaseModel):
    name: str
    email: EmailStr
    account_id: int

    @field_validator("account_id")
    @classmethod
    def validate_account_id(cls, value):
        if value <= 0:
            raise ValueError(f"account_id must be positive: {value}")
        return value

# Test : avec un ID négatif (devrait échouer)
try:
    user = User(name="Ali", email="ali@gmail.com", account_id=-10)
    print(user)
except ValidationError as e:
    print(" Erreur de validation :")
    print(e)

"""Exemple 2"""

user_json_str = user.model_dump_json()
# this will return a JSON strinf representation of the model's data
print(user_json_str)

{"name": "Ali, "email": "ali@gmail.com", "account_id": 1234}

"""Correction"""

{"name": "Ali", "email": "ali@gmail.com", "account_id": 1234}

"""Exemple 3"""

user_json_str = user.model_dump_json()
# this will return a JSON strinf representation of the model's data
print(user_json_str)

{"name": "Ali, "email": "ali@gmail.com", "account_id": 1234}

"""Correction"""

{"name": "Ali", "email": "ali@gmail.com", "account_id": 1234}

user_json_obj = user.model_dump()

json_str = {"name": "Ali, "email": "ali@gmail.com", "account_id": 1234}
user = user.parse_raw(json_str)

"""correction"""

json_str = '{"name": "Ali", "email": "ali@gmail.com", "account_id": 1234}'

"""# Pydantic vs Dataclasses

Exemple
"""

# Python 3.6+
x: int = 0
y: str = "hello"

from dataclasses import dataclass

@dataclass
class User:
    name: str
    email: str
    account_id: int